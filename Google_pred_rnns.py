# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13BOafQaBJwEwAWe8I7MOQLRSLXcUjBaE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""##Import Training Set"""

dataset_train = pd.read_csv('Google_Stock_Price_Train.csv')
training_set = dataset_train.iloc[:, 1:2].values  #.values makes a numpy array

"""##Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
training_set_scaled = sc.fit_transform(training_set)

"""##Creating a data strcuture with 60 timesteps and one output"""

#for prediction of day X, it learns from X-1, X-2, ..., X-60
X_train = []
y_train = []
for i in range(60, 1258):
  X_train.append(training_set_scaled[i-60:i, 0]) #there is just one column in that dataset (c = 0)
  y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

"""##Reshaping"""

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
#(nb_samples, timesteps, input_dim)
#nb_sample -> nb_batches -> ~1300 or x.shape(0) -> nb of columns
#timesteps -> 60 or x.shape(1)-> number of rows
#in this way this code can be used for any other dataframe
#number of predictor (indicator) -> 1 or google stock price

"""##Initialization of RNN"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

regressor = Sequential()

"""##Adding the first LSTM layer and Dropout Regularization to prevent Overfitting"""

regressor.add(LSTM(units =50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
#units -> number of neurons of that first LSTM layer
#return_seq -> true cause we have next layer to get the result from this layer
#input_shape -> timestep + indicator -> only needed for 1st layer

#dropout helps to reduce overfitting, in each iteration disables a certain percent of nodes (neurons)
regressor.add(Dropout(0.2))

#2nd LSTM layer + Dropout
regressor.add(LSTM(units =50, return_sequences = True))
regressor.add(Dropout(0.2))

#3rd LSTM layer + Dropout
regressor.add(LSTM(units =50, return_sequences = True))
regressor.add(Dropout(0.2))

#4th LSTM layer + Dropout
regressor.add(LSTM(units =50)) #defualt val of ret_seq is False
regressor.add(Dropout(0.2))

#Output
regressor.add(Dense(units= 1))

#Compile RNN
regressor.compile(optimizer= 'adam', loss= 'mean_squared_error')

#fitting RNN to the training set
regressor.fit(X_train, y_train, epochs= 100, batch_size= 32)

"""##Real and predicted results of 2017"""

dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')
real_stock = dataset_test.iloc[:, 1:2].values  #.values makes a numpy array

#prediction
dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
#axis = o -> vertical, since we want concatenate the rows or lines
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values  #len()-len() -> gives start of Jan 2017 
inputs = inputs.reshape(-1, 1)
inputs = sc.transform(inputs)

X_test = []
for i in range(60, 80):
  X_test.append(inputs[i-60:i, 0]) 
X_test = np.array(X_test) 
X_test = np.reshape(X_test, (X_test.shape[0], X_train.shape[1], 1))
predicted_stock = regressor.predict(X_test)
predicted_stock = sc.inverse_transform(predicted_stock) #since it was scaled before

"""##Visualization"""

plt.plot(real_stock, color = 'pink', label = 'Real Google Stock Price')
plt.plot(predicted_stock, color = 'navy', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()